buildscript {
    repositories {
        maven { url = 'https://maven.neoforged.net/releases' }
        //maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        //classpath 'org.parchmentmc:librarian:1.+'
    }
}
plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.26'
}

version = '1.2.1'
group = 'woodenshears'

base {
	archivesName = 'SBM-WoodenShears-1.20.2'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

//minecraft {
	//mappings channel: 'official', version: '1.20.2'
	//copyIdeResources = true

    runs {
        configureEach{
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            systemProperty 'forge.logging.console.level', 'debug'
        }
        client {
            systemProperty 'forge.enabledGameTestNamespaces', 'woodenshears'
        }
        server {
            systemProperty 'forge.enabledGameTestNamespaces', 'woodenshears'
            programArgument '--nogui'
        }
        data {
            programArguments.addAll '--mod', 'woodenshears', '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
            

            // mods {
            //     securitycraft {
            //         source sourceSets.main
            //     }
            // }
        }
    }
//}

dependencies {
	implementation "net.neoforged:neoforge:20.2.35-beta"

sourceSets.main.resources {
	srcDir 'src/generated/resources' //include generated files
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes(["Specification-Title": "SBM-WoodenShears",
                    "Specification-Vendor": "Built Broken Modding",
                    "Specification-Version": "1",
                    "Implementation-Title": "SBM-WoodenShears",
                    "Implementation-Version": "${version}",
                    "Implementation-Vendor": "Built Broken Modding"],)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}